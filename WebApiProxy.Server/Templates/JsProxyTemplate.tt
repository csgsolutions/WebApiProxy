<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

;(function(exportCallback) {
	"use strict";

	var exports = {
		options: {
			baseUrl: "<#= this.Metadata.Host #>",
			ajax:  function(method, url, data) {
				if (typeof window === 'undefined' || typeof window.jQuery === 'undefined') {
					throw "WebApiProxy: jQuery is required if no other ajax method has been defined.";
				}

				var opts = {
					type: method,
					url: url,
					dataType:"json"
				};

				if ((method === "post" || method === "put") && data) {
					opts.data = JSON.stringify(data);
				}

				return window.jQuery.ajax.apply(window.jQuery, opts);
			}
		},
		proxies: {}
	};

	function invoke(url, type, urlParams, body) {
		return exports.options.ajax(type, combinePath(exports.options.baseUrl, composeUrl(url, urlParams)), body);
	}

	function extend(){
		var extended = arguments[0] || {};
		var prop;
		var i;
		
		for (i = 1; i < arguments.length; i++) {
			for (prop in arguments[i]) {
				if (Object.prototype.hasOwnProperty.call(arguments[i], prop)) {
					extended[prop] = arguments[i][prop];
				}
			}           
		}

		return extended;
	}

	function composeUrl(url, urlParams) {
		var used = [];
		var key;
		var hasQuery = false;

		url = url.replace(/\{(\w+)\}/gi, function(match, capture, offset) {			
			if (typeof urlParams[capture] !== 'undefined'){
				used[capture] = true;
			}

			if (urlParams[capture] == null){
				return '';
			} else {				
				return urlParams[capture].toString();
			}
		});

		for (key in urlParams){
			if (!used[key] && urlParams[key] != null) {
				if (!hasQuery && url.indexOf('?') === -1){
					url += '?';
					hasQuery = true;
				} else {
					url += '&';
				}
				url += key + '=' + urlParams[key].toString();
			}
		}

		return url;
	}
	
	function combinePath() {
        var path = '';
        var s;
        var first;
        var last;

        for (var i = 0; i < arguments.length; i++) {
            if (arguments[i] == null) {
                continue;
            }
            s = arguments[i].toString();
                        
            first = s.indexOf('/');

            if (s === '/' && path.length > 0) {
                continue;
            }
            else if (path[path.length-1] === '/' && first === 0) {
                path += s.slice(1);
            } else if (path[path.length - 1] === '/' || first === 0) {
                path += s;
            } else if (path.length > 0) {                
                path += ('/'+s);
            } else {
                path += s;
            }
        }

        return path;
    }

	/* Proxies */

<# foreach(var definition in this.Metadata.Definitions) { #>
	exports.proxies["<#= definition.Name.ToLower() #>"] = {
		"defaultOptions": {},
<# foreach(var method in definition.ActionMethods.OrderBy(m => m.Name)) {	
	var allParameters = method.UrlParameters.AsEnumerable();	
	
	if (method.BodyParameter != null) {
		allParameters = allParameters.Concat(new [] { method.BodyParameter });
	}

	var selectedParameters = allParameters.Where(m => m != null).Select(m => m.Name).ToList();	
	var parameterList = string.Join(",", selectedParameters);
	var parameterString = new System.Text.StringBuilder();	

	if (method.UrlParameters.Any()) {
		parameterString.Append(", {");
		parameterString.Append(string.Join(", ", method.UrlParameters.Select(s => "'" + s.Name + "':" + s.Name)));		
		parameterString.Append("}");
	} else {
		parameterString.Append(",null");
	}
	
	if (method.BodyParameter != null) {
		parameterString.Append(", ").Append(method.BodyParameter.Name);		
	}

#>
		"<#= method.Name.ToCamelCasing() #>": function(<#=parameterList#>) {
			return invoke.call(this, "<#= method.Url #>", "<#=method.Type.ToString().ToLower()#>" <#=parameterString#>);
		},
<# } #> 
	};
<#	} #>

	exportCallback(exports);

}(function(exports){
<#if (string.IsNullOrEmpty(this.ExportCallback)) {#>
	window.jQuery.proxies = exports.proxies;
<#} else {#>
	if (typeof <#= this.ExportCallback#> === 'function'){
		<#= this.ExportCallback #>(exports);
	}
<#}#>
}));
