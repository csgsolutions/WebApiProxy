<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

;(function(exportCallback) {
	"use strict";

	var exports = {
		options: {
			baseUrl: "<#= this.Metadata.Host #>",
			ajax:  function() {
				if (typeof window === 'undefined' || typeof window.jQuery === 'undefined') {
					throw "WebApiProxy: jQuery is required if no other ajax method has been defined.";
				}
				return $.ajax.apply($, arguments);
			},
			ajaxDefaults: {},
		},
		proxies: {}
	};

	function invoke(url, type, urlParams, body) {
		url += getQueryString(urlParams);

		var ajaxOptions = extend({}, exports.options.ajaxDefaults, this.defaultOptions, {
            "url": combinePath(exports.options.baseUrl, url),            
            "data": ((type === 'post' || type === 'put') && body) ? JSON.stringify(body) : null,
            "type": type
		});
		
		return exports.options.ajax(ajaxOptions);
	}


	function extend(){
		var extended = arguments[0] || {};
		var prop;
		var i;

		for (i = 1; i < arguments.length; i++) {
			for (prop in arguments[i]) {
				if (Object.prototype.hasOwnProperty.call(arguments[i], prop)) {
					extended[prop] = arguments[i][prop];
				}
			}           
		}

		return extended;
	}
			
	function getQueryString(params, queryString) {
		queryString = queryString || "";
		for(var prop in params) {
			if (params.hasOwnProperty(prop)) {
				var val = (params[prop] == null) ? null : params[prop];
				if (val === null) continue;

				if ("" + val === "[object Object]") {
					queryString = getQueryString(params[prop], queryString);
					continue;
				}

				if (queryString.length) {
					queryString += "&";
				} else {
					queryString += "?";
				}
				queryString = queryString + prop + "=" +val;
			}
		}
		return queryString;
	}

	

	function combinePath() {
        var path = '';
        var s;
        var first;
        var last;

        for (var i = 0; i < arguments.length; i++) {
            if (arguments[i] == null) {
                continue;
            }
            s = arguments[i].toString();
                        
            first = s.indexOf('/');

            if (s === '/' && path.length > 0) {
                continue;
            }
            else if (path[path.length-1] === '/' && first === 0) {
                path += s.slice(1);
            } else if (path[path.length - 1] === '/' || first === 0) {
                path += s;
            } else if (path.length > 0) {                
                path += ('/'+s);
            } else {
                path += s;
            }
        }

        return path;
    }

	/* Proxies */

<# foreach(var definition in this.Metadata.Definitions) { #>
	exports.proxies["<#= definition.Name.ToLower() #>"] = {
		"defaultOptions": {},
<# foreach(var method in definition.ActionMethods.OrderBy(m => m.Name)) {	
	var allParameters = method.UrlParameters.AsEnumerable();	
	
	if (method.BodyParameter != null) {
		allParameters = allParameters.Concat(new [] { method.BodyParameter });
	}

	var selectedParameters = allParameters.Where(m => m != null).Select(m => m.Name).ToList();	
	var parameterList = string.Join(",", selectedParameters);
	var url = ("\"" + method.Url.Replace("{", "\" + ").Replace("}", " + \"") + "\"").Replace(" + \"\"","");
	var parameterString = new System.Text.StringBuilder();	

	if (method.UrlParameters.Any()) {
		parameterString.Append(", {");
		parameterString.Append(string.Join(", ", method.UrlParameters.Select(s => "'" + s.Name + "':" + s.Name)));		
		parameterString.Append("}");
	} else {
		parameterString.Append(",null");
	}
	
	if (method.BodyParameter != null) {
		parameterString.Append(", ").Append(method.BodyParameter.Name);		
	}

#>
		"<#= method.Name.ToCamelCasing() #>": function(<#=parameterList#>) {
			return invoke.call(this, <#= url #>, "<#=method.Type.ToString().ToLower()#>" <#=parameterString#>);
		},
<# } #> 
	};
<#	} #>

	exportCallback(exports);

}(function(exports){
<#if (string.IsNullOrEmpty(this.ExportCallback)) {#>
	$.proxies = exports.proxies;
<#} else {#>
	if (typeof <#= this.ExportCallback#> === 'function'){
		<#= this.ExportCallback #>(exports);
	}
<#}#>
}));